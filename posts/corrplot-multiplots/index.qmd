---
title: "How to make a figure with several panels that include plots that are initially invisible? The case of the {corrplot} package"
description: "Multi-panel figure using plots from {corrplot}"
author: "Pierre-Yves de Müllenheim"
date: "11/15/2022"
format:
  html:
    code-fold: false
    css: ../../css/posts.css
execute:
  warning: false
  cache: true
  freeze: true
tbl-cap-location: top
editor: visual
categories:
  - R
  - Data visualization
  - Correlation
link-citations: true
image: ../../docs/posts/corrplot-multiplots/index_files/figure-html/unnamed-chunk-9-1.png
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

# The problem

Some days ago, I was contacted by a student who wanted to visualize several sets of correlation values on the same figure. Making a multi-panel figure using correlation plots produced from the [`{corrplot}`](https://github.com/taiyun/corrplot) package seemed an interesting option. However, I met several unexpected problems to get the desired result. In this post, I share the solutions I have found to finally get a good result after some time spent on the web.

First, let's load the packages required for our analyses:

```{r}
library(palmerpenguins)
library(dplyr)
library(corrplot)
library(ggplotify)
library(cowplot)
library(ragg)
```

Second, let's get some data, here from the `{palmerpenguins}` package that provides physical characteristics of three species of penguins:

```{r}
data("penguins")
```

Third, let's compute correlation matrices putting into relation the physical characteristics for each of the three species of penguins:

```{r}
# Correlation matrix for 'Adelie' specie
mat_adelie <- 
  penguins %>% 
  filter(species == "Adelie") %>%
  select(bill_length_mm: body_mass_g) %>%
  cor(use = "pairwise.complete.obs")
  
# Correlation matrix for 'Gentoo' specie
mat_gentoo <- 
  penguins %>% 
  filter(species == "Gentoo") %>%
  select(bill_length_mm: body_mass_g) %>%
  cor(use = "pairwise.complete.obs")
  
# Correlation matrix for 'Chinstrap' specie
mat_chinstrap <- 
  penguins %>% 
  filter(species == "Chinstrap") %>%
  select(bill_length_mm: body_mass_g) %>%
  cor(use = "pairwise.complete.obs")

```

Then, I thought we could simply assign the output of the `corrplot()` function from the `{corrplot}` package (i.e., the function that generates the correlation plot) to a name, say `p`, which could have allow me to use `p` when building the targeted multi-panel figure. Here the example for the correlation matrix related to the `Adelie` specie:

```{r}
p <-
    corrplot(
      mat_adelie, 
      method ="color", 
      type ="lower", 
      tl.col ="black",
      addCoef.col = "black",
      mar = c(0,0,0,0)
  )
```

Unfortunately, this did not work. `p` did not return a plot, but the list of the information that were used when generating the plot:

```{r}
p
```

The reason is that the plot is made "invisible" when it is provided by the `corrplot()` function, making it impossible to directly catch.

# The solutions

At first glance, we could have decided to abandon the idea of using several graphic objects to be combined into a multi-panel figure, and then we could have stopped after the implementation of the following solution proposed on [Stack Overflow](https://stackoverflow.com/questions/27929452/r-return-corrplot-as-object):

```{r}
#| fig-height: 7
#| fig-width: 20

par(mfrow = c(1, 3))
corrplot(
  mat_adelie, 
  method = "color", 
  type = "lower", 
  tl.col = "black",
  addCoef.col = "black",
  mar = c(0,0,0,0),
  tl.cex = 2.5,
  number.cex = 2.5
  )
corrplot(
  mat_gentoo, 
  method = "color", 
  type = "lower", 
  tl.col = "black",
  addCoef.col = "black",
  mar = c(0,0,0,0),
  tl.cex = 2.5,
  number.cex = 2.5
  )
corrplot(
  mat_chinstrap, 
  method = "color", 
  type = "lower", 
  tl.col = "black",
  addCoef.col = "black",
  mar = c(0,0,0,0),
  tl.cex = 2.5,
  number.cex = 2.5
  )

par(mfrow = c(1, 1)) # To clear layout
```

However, one could want to be able to catch the plot from the `corrplot()` function and to bind it to a name so that it can be used elsewhere in a more complex figure. What I have learnt is that it remains possible to do it by using a customized function that would return the last plot shown in the graphic device, as proposed on [Stack Overflow](https://stackoverflow.com/questions/65031113/how-to-save-a-plot-created-by-corrplot-function-in-r):

```{r}
get_corr_plot <- function(matrix) {
  corrplot(
    matrix,
    method = "color", 
    type = "lower", 
    tl.col = "black",
    addCoef.col = "black",
    mar = c(0,0,0,0),
    tl.cex = 2,
    number.cex = 2
    )

  p <- recordPlot()

  return(p)
}
```

In the code above, you will notice that the last plot is recorded thanks to the `recordPlot()` function from the `{grDevices}` package. The new problem is now that the function returns an object of class `recordedplot`, which is not yet really interesting to make complex figures as one could want to do with the `{cowplot}` package for example because the class `recordedplot` may not be accepted by the package functions. A solution is then to convert the `recordedplot` object to a `grob` object using the function `as.grob()` from the `{ggplotify}` package, as follows:

```{r, results=FALSE}
grob_adelie <- as.grob(~get_corr_plot(matrix = mat_adelie))
grob_gentoo <- as.grob(~get_corr_plot(matrix = mat_gentoo))
grob_chinstrap <- as.grob(~get_corr_plot(matrix = mat_chinstrap))
```

We can finally use the `plot_grid()` function from the `{cowplot}` package to draw our final figure:

```{r}
#| fig-height: 7
#| fig-width: 20

fig <- plot_grid(grob_adelie, grob_gentoo, grob_chinstrap, nrow = 1, labels=LETTERS[1:3], label_size = 25)
fig
```

# The final touch

The graphic device may not always provide an approriate view of the figure. To have more control on this when we want to export the figure, we can use the `{ragg}` package as follows (maybe several trials and errors when manipulating the width, height, and scaling arguments will be needed to get satisfactory results; for more information, please see the [Thomas Lin Pedersen's post](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/)):

```{r, results = FALSE, message = FALSE}
agg_png(
  "posts/corrplot-multiplots/index_files/figure-html/fig.png", 
  width = 21, 
  height = 7, 
  units = "cm",
  res = 300,
  scaling = 0.4
)
fig
dev.off()
```

Et voilà, we are done!

# Session info

```{r, echo = FALSE}
sessionInfo()
```
